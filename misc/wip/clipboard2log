#!/usr/bin/perl
use strict;
use warnings;

my @lines;
while (<>){
	s/\s+(\d)/\n$1/g;
	my @parts = split /\n/;
	push @lines, @parts;
}

# --------

sub parsewhen {
	# 09:42
	my $w = $_[0];
	die "parse when $w" unless /^(\d+):(\d+)\s*$/;
	return $1 * 60 + $2;
}

my($name, $emoji, $when);
my $lastwhen = 0;
my $offset = 0;
my @formatted;

for(@lines){
	chomp;
	if(/^([A-Z].*)\s*(:.*:)/){
		$name = $1;
		$emoji = $2;
	}elsif(/^\d+:\d+$/){
		$when = $_;

		my $parsed = parsewhen($when);

		if($parsed < $lastwhen){
			# assume next day
			$offset++;
		}

		$lastwhen = $parsed;

	}elsif(length){
		s/^\s*//;

		my $msg = sprintf "%s:00: %s: %s", $when, $name, $_;
		push @formatted, { "msg" => $msg, offset => $offset };
	}
}

# --------

sub getdate {
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime();
	return ($year + 1900, $mon + 1, $mday);
}

my ($y, $m, $d) = getdate(); # (2020, 10, 8);
for(@formatted){
	my $msg = $_->{msg};
	my $localoffset = $_->{offset};

	# FIXME: wrong way round
	my $d_adj = $d + $offset - $localoffset;
	print "$y-$m-$d_adj $msg\n";
}
